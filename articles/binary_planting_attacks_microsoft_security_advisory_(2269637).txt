Binary Planting Attacks - Microsoft Security Advisory (2269637)
===============================================================
Posted by, ninlar on 2010-09-07 14:35:06

OVERVIEW

Last week Microsoft® released a security advisory about DLL pre-loading attacks
also known as “binary planting attacks.” This article will present some
background information about Dynamic Link Libraries, and the threat posed by
this exploit will be assessed. Finally a simple application is built
demonstrating an attack. The purpose of this article is to teach software
developers to securely load libraries that are explicitly linked.

WHAT IS A DLL?

A DLL is a dynamic link library is a module containing code that can be accessed
by multiple applications on the Microsoft® Windows. It is shared code that can
be loaded by a process. A good example of a DLL is the Windows Sockets API.
Winsock is provided as a DLL on Windows that allows programmers to use sockets
for network communication.

BENEFITS OF USING DLLS

It would be impractical for each programmer to re-invent the wheel when they
want to communicate on a network. It would take several months to try and
implement a sockets library. Instead programmers reference the Winsock library
in their code. Since multiple applications use the same library, the code
segment only needs to be loaded once. This means that using DLLs can reduce the
memory usage of multiple processes that utilize the same library. It also
reduces the size of the applications that use the DLL.
DLLs also provide a couple of other benefits. If a bug is found in a DLL, the
bug can be fixed in all applications that use the DLL without updating them. The
user simply replaces the faulty DLL, and the next time the process loads, it
will use the new version.

DRAWBACKS OF DLLS

Since multiple applications may use a dynamic link library, programmers must
make sure they maintain binary compatibility when creating new versions. If the
programmer changes the signature of a function in a DLL, it can break
applications that were built against the previous version. This is commonly
known as “DLL hell.” Sometimes companies also improperly package DLLs in
their install kits. The installers do not properly check the version of the DLLs
on the machine and overwrite the library with a previous incompatible version.

EXPLOITING EXPLICIT LINKED APPLICATIONS

DLLs have one more awesome feature. A DLL can be loaded and called at runtime
which is known as explicit linking. This allows applications to load modules on
the fly. It is how applications that support plug-ins are usually implemented.
Applications that support plug-ins read a configuration file that contains a
list of libraries that they should load on startup. Unfortunately, this
flexibility of loading modules on the fly exposes a security hole. All
explicitly linked DLLs are loaded using a Windows API function called
LoadLibrary. LoadLibrary causes a function that must be implemented in every DLL
to be called: DLLMain. If the library the program expected to load has been
overwritten with a malicious DLL, the program will run the attacker’s code
using the privileges of the current process. If the user is logged into the
machine as an administrator, the malicious code can do whatever it wants.

IMPLICITLY LINKED APPLICATIONS

Implicitly linked applications are not affected by this security hole. Implicit
linking requires the name of the library be known at compile time. The linker
also requires that an additional static library be linked when using implicit
linking. When implicitly linked applications start, the Import Address Table is
populated with the locations of the functions in the DLL. If all of the
functions are not found, an error occurs and the program shuts down.

SAMPLE APPLICATION

This section contains a sample application that is vulnerable to the exploit.
This article will walk through the code and reveal the vulnerable area.

Main.cpp

    // Exclude headers we won't be using for faster building
    #define WIN32_LEAN_AND_MEAN
     
    // Need the Windows header for LoadLibrary and GetProcAddress
    #include <windows .h>
    #include <iostream>
     
    using namespace std;
     
    // Create a typedef for the "Foo" function signature
    // This is somewhat similar to a delegate in C#
    typedef TCHAR* (_cdecl *fnFoo)();
     
    int main( int argc, char* argv[] )
    {
	    const TCHAR* szDLLName = TEXT("Foo.dll");
     
	    // Load external DLL
	    HMODULE hDLL = LoadLibrary( szDLLName );
     
	    // If we successfully loaded the DLL...
	    if ( hDLL != static_cast<hmodule>( 0 ) )
	    {
		    // Get the pointer to the function Foo in the DLL
		    fnFoo pfnFoo = reinterpret_cast<fnfoo>( 
			    GetProcAddress( hDLL, "Foo" ) );
     
		    // Call function "Foo" in the DLL
		    TCHAR* szMessage = pfnFoo();
     
		    // Print out message
		    wcout < < TEXT("Message: ") << szMessage << endl;
     
		    // Release message memory
		    delete [] szMessage;
	    }
	    else
	    {
		    wcout << TEXT("Failed to load Foo.dll!\n");
	    }
     
	    wcout << TEXT("Press any key to exit.");
	    wcin.get();
     
	    return S_OK;
    }

This application loads the DLL Foo.dll when it starts up. Next it gets the 
address of the function named Foo. Finally the program calls the function, and 
prints out the result. The code segment below resides in the DLL.

Foo.cpp

    // Foo.cpp : Defines the exported functions for the DLL application.
    //
     
    #include "stdafx.h"
    #include "Foo.h"
     
    // Safe string copy functions
    #include <strsafe .h>
     
    // This is the exported function Foo that is called by the main program.
    FOO_API TCHAR* Foo(void)
    {
	    TCHAR*	szBar = TEXT("Bar");
	    size_t	nSize = lstrlen( szBar );
	    TCHAR*	szMessage = new TCHAR[nSize + 1];
     
	    // Copy message into heap allocated buffer
	    StringCchCopy(
		    szMessage,
		    nSize + 1,
		    szBar );
     
	    // Return the message
	    return szMessage;
     
    }</strsafe>

The function Foo in the DLL simply creates a string “Bar” and returns it to the 
calling program. After the main program receives the result from the call into 
the DLL, it prints it out into a console seen in the figure in the Program 
Output section.

PROGRAM OUTPUT

http://www.phx2600.org/wp-content/uploads/output1.png [1]

VULNERABLE SECTION

These two lines in the main program leave the program vulnerable to 
exploitation:

    const TCHAR* szDLLName = TEXT("Foo.dll");
     
    // Load external DLL
    HMODULE hDLL = LoadLibrary( szDLLName )

The second line calls LoadLibrary and passes it the name of the file. It does 
not use a full path to specify the location of the file. If the file is not 
found by the OS, it will search for it in other locations. If a malicious DLL is
found in the DLL search path for the user, it will be loaded by the application.
At that point, the attacker can run his malicious code.

THE MALICIOUS DLL

Earlier it was mentioned that all DLLs must implement a function called DLLMain.
Below is the implementation for Foo.dll. It does not do anything.

    // dllmain.cpp : Defines the entry point for the DLL application.
    #include "stdafx.h"
     
    BOOL APIENTRY DllMain
	    ( HMODULE hModule,
	      DWORD  ul_reason_for_call,
	      LPVOID lpReserved
	    )
    {
	    return TRUE;
    }

As mentioned, the above function is called when the library is loaded. In 
Foo.dll it does absolutely nothing. It returns immediately from the function. If
this function was implemented with malicious code, it could be used to exploit 
the main program. Below is a malicious example that simply prints out a message 
to the command line.

    // dllmain.cpp : Defines the entry point for the DLL application.
    #include "stdafx.h"
    #include <iostream>
     
    using namespace std;
     
    BOOL APIENTRY DllMain
	    ( HMODULE hModule,
	      DWORD  ul_reason_for_call,
	      LPVOID lpReserved
	    )
    {
	    // Print message showing the malicious DLL has been loaded
	    wcout < < "You are running my malicious code" << endl;
	    cin.get();
     
	    // I could do whatever I want to your machine from here
	    // if you are logged in as an admin...
     
	    return TRUE;
    }

After compiling the code above into a DLL named Foo.dll, the previous version is
replaced with a malicious one. Note that the function Foo does not need to be 
implemented. DLLMain is called at startup and does not need to return. It can do
whatever it wants. Below is the result from the console running the program that
loads the malicious DLL.

PROGRAM OUTPUT

http://www.phx2600.org/wp-content/uploads/output2.png [2]

After the malicious code runs, the program crashes because the function Foo does
not exist in this malicious copy of the DLL. It does not matter. Before the 
program crashes, the malicious code had free reign to load other processes and 
download other viruses.

http://www.phx2600.org/wp-content/uploads/securityAdvisory.png [3]

SECURE DLL LOADING

Microsoft recommends that programmers use SetDLLDirectory to remove the current 
folder from the DLL search path. The DLL search path is used when a DLL was not 
found in the current folder. The current folder is checked when a fully 
qualified path is not used with LoadLibrary. Programmers should always use a 
fully qualified path to explicitly link DLLs. For other recommendations on 
secure DLL loading see the references section.

THREAD ASSESSMENT

This exploit is difficult to use without physical access to a targets’ machine. 
It also requires that the attacker know the name of a DLL that is explicitly 
linked by an application used by the target. That application would also have to
not use a fully qualified path to load the libraries. It is possible to use this
exploit remotely; however, the target would have to execute a program on a 
remotely compromised drive.

Microsoft has also released an update that allows user to have tighter control 
over their DLL search path. The update installs a registry key that the 
administrator can manipulate to control the DLL search path on the machine. 
Setting the registry key could cause legitimate applications to crash.

REFERENCES

Microsoft Corporation. A new CWDIllegalInDllSearch registry entry is available 
to control the DLL search path algorithm. 25 August 2010. 29 August 2010 .

—. Dynamic-Link Library Security. 19 August 2010. 29 August 2010 .

—. Microsoft Security Advisory (2269637). 23 August 2010. 29 August 2010 .



Links:
------
[1] http://www.phx2600.org/wp-content/uploads/output1.png
[2] http://www.phx2600.org/wp-content/uploads/output2.png
[3] http://www.phx2600.org/wp-content/uploads/securityAdvisory.png

Comments
--------

Posted by, Penguin on 2010-09-07 14:49:03

Amazing.

Not Opinion

New. Interesting. Relevant.

Its like a real article.

Winner!

* * *

Posted by, maxwell on 2010-09-08 21:40:01

This is a fantastic article!

* * *

Posted by, retro on 2010-09-13 13:51:58

Good job. Also, I like the term "binary planting".
